import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import io
from scipy.interpolate import CubicSpline

st.title("üìä –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Å–ø–ª—ñ—Ç –¢–ë + Digital –∑ —ñ–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—î—é –æ—Ö–æ–ø–ª–µ–Ω–Ω—è")

# --- –í–≤–µ–¥–µ–Ω–Ω—è —Ç–æ—á–æ–∫ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è ---
st.subheader("1Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å 5 —Ç–æ—á–æ–∫ TRP ‚Üí Reach % –¥–ª—è –¢–ë")
tv_trp_points = []
tv_reach_points = []
for i in range(5):
    col1, col2 = st.columns(2)
    trp = col1.number_input(f"TRP –¢–ë, —Ç–æ—á–∫–∞ {i+1}", min_value=0.0, value=float(i*50+50))
    reach = col2.number_input(f"Reach_TV %, —Ç–æ—á–∫–∞ {i+1}", min_value=0.0, max_value=100.0, value=float(i*10+20))
    tv_trp_points.append(trp)
    tv_reach_points.append(reach/100)  # –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —É 0-1

st.subheader("2Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å 5 —Ç–æ—á–æ–∫ Impressions ‚Üí Reach % –¥–ª—è Digital")
dig_imp_points = []
dig_reach_points = []
for i in range(5):
    col1, col2 = st.columns(2)
    imp = col1.number_input(f"Impressions Digital (—Ç–∏—Å.), —Ç–æ—á–∫–∞ {i+1}", min_value=0.0, value=float(i*100+100))
    reach = col2.number_input(f"Reach_Digital %, —Ç–æ—á–∫–∞ {i+1}", min_value=0.0, max_value=100.0, value=float(i*5+10))
    dig_imp_points.append(imp)
    dig_reach_points.append(reach/100)

# --- –Ü–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—è ---
tv_spline = CubicSpline(tv_trp_points, tv_reach_points)
dig_spline = CubicSpline(dig_imp_points, dig_reach_points)

# --- –í—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ---
st.subheader("3Ô∏è‚É£ –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –±—é–¥–∂–µ—Ç—É —Ç–∞ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ")
budget = st.number_input("–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç", min_value=1000, step=1000, value=50000)
flight_weeks = st.number_input("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ñ–ª–∞–π—Ç—É (—Ç–∏–∂–Ω—ñ)", min_value=1, value=4)
tv_cost_per_trp = st.number_input("–í–∞—Ä—Ç—ñ—Å—Ç—å 1 TRP –≤ –¢–ë", value=500.0)
dig_cost_per_imp = st.number_input("–í–∞—Ä—Ç—ñ—Å—Ç—å 1 —Ç–∏—Å. —ñ–º–ø—Ä–µ—Å—ñ–π –≤ Digital", value=5.0)
tv_weekly_clutter = st.number_input("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∏–π —Ç–∏—Å–∫ –¢–ë (–¢–†–ü/—Ç–∏–∂–¥–µ–Ω—å)", value=150.0)
dig_weekly_clutter = st.number_input("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∏–π —Ç–∏—Å–∫ Digital (—Ç–∏—Å. —ñ–º–ø—Ä–µ—Å—ñ–π/—Ç–∏–∂–¥–µ–Ω—å)", value=300.0)
n_options = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Å–ø–ª—ñ—Ç—ñ–≤", 5, 15, 10)

# --- –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É ---
min_budget_tv = tv_weekly_clutter * flight_weeks * tv_cost_per_trp
min_budget_dig = dig_weekly_clutter * flight_weeks * dig_cost_per_imp / 1000
min_total_budget = min_budget_tv + min_budget_dig

if budget < min_total_budget:
    st.warning(f"‚ùå –ü–æ—Ç–æ—á–Ω–∏–π –±—é–¥–∂–µ—Ç ({int(budget)}) –∑–∞–º–∞–ª–∏–π –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–ª—ñ—Ç—É. "
               f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç: {int(min_total_budget)}")

# --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ ---
results = []
for split in np.linspace(0.1, 0.9, n_options):
    tv_budget = budget * split
    dig_budget = budget * (1 - split)

    tv_trp = tv_budget / tv_cost_per_trp
    dig_imp = dig_budget / dig_cost_per_imp * 1000

    tv_reach = float(np.clip(tv_spline(tv_trp), 0, 1))
    dig_reach = float(np.clip(dig_spline(dig_imp), 0, 1))

    cross_reach = tv_reach + dig_reach - tv_reach * dig_reach

    tv_weekly = tv_trp / flight_weeks
    dig_weekly = dig_imp / flight_weeks / 1000

    tv_ok = tv_weekly >= tv_weekly_clutter
    dig_ok = dig_weekly >= dig_weekly_clutter
    overall_ok = tv_ok and dig_ok

    results.append({
        "–°–ø–ª—ñ—Ç –¢–ë": f"{split*100:.0f}%",
        "–ë—é–¥–∂–µ—Ç –¢–ë": int(tv_budget),
        "–ë—é–¥–∂–µ—Ç Digital": int(dig_budget),
        "TRP_TV": round(tv_trp,1),
        "Imp_Digital": int(dig_imp),
        "Reach_TV %": round(tv_reach*100,1),
        "Reach_Digital %": round(dig_reach*100,1),
        "Cross_Reach %": round(cross_reach*100,1),
        "–¢–∏—Å–∫ –¢–ë/—Ç–∏–∂–¥": round(tv_weekly,1),
        "–¢–∏—Å–∫ Digital/—Ç–∏–∂–¥": round(dig_weekly,1),
        "–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π": overall_ok
    })

df = pd.DataFrame(results)

# --- –ü—ñ–¥—Å–≤—ñ—Ç–∫–∞ ---
def highlight(row):
    color = "background-color: lightgreen" if row["–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π"] else "background-color: lightcoral"
    return [color]*len(row)

st.subheader("üìë –†–µ–∑—É–ª—å—Ç–∞—Ç–∏")
st.dataframe(df.style.apply(highlight, axis=1))

# --- –ì—Ä–∞—Ñ—ñ–∫ ---
st.subheader("üìà –ö—Ä–æ—Å–º–µ–¥—ñ–π–Ω–µ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è")
fig, ax = plt.subplots()
cross_values = df["Cross_Reach %"]
colors = ["green" if x else "red" for x in df["–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π"]]
ax.scatter(df["–°–ø–ª—ñ—Ç –¢–ë"], cross_values, c=colors, s=100)
ax.set_ylabel("–ö—Ä–æ—Å–º–µ–¥—ñ–π–Ω–µ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è %")
ax.set_xlabel("–°–ø–ª—ñ—Ç –¢–ë")
ax.set_title("–ö—Ä–æ—Å–º–µ–¥—ñ–π–Ω–µ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–ø–ª—ñ—Ç–∞")
plt.xticks(rotation=45)
st.pyplot(fig)

# --- –ï–∫—Å–ø–æ—Ä—Ç Excel ---
st.subheader("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel")
output = io.BytesIO()
with pd.ExcelWriter(output, engine="openpyxl") as writer:
    df.to_excel(writer, index=False, sheet_name="Splits")
output.seek(0)
st.download_button(
    label="–°–∫–∞—á–∞—Ç–∏ Excel",
    data=output,
    file_name="media_split.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

