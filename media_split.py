import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

st.title("–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Å–ø–ª—ñ—Ç –¢–ë / Digital")

# –í—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
budget = st.number_input("–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç", min_value=1000, step=1000)
weeks = st.number_input("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ñ–ª–∞–π—Ç—É (—Ç–∏–∂–Ω—ñ)", min_value=1, value=4)

# –¢–í –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
st.subheader("–¢–µ–ª–µ–±–∞—á–µ–Ω–Ω—è")
tv_cpt = st.number_input("–í–∞—Ä—Ç—ñ—Å—Ç—å 1 TRP (–≥—Ä–Ω)", min_value=1.0, value=10000.0)
comp_tv_trp_week = st.number_input("–¢–∏—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ —É –¢–ë (TRP/—Ç–∏–∂–¥–µ–Ω—å)", min_value=0, value=50)

# Digital –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
st.subheader("Digital")
dig_cpm = st.number_input("–í–∞—Ä—Ç—ñ—Å—Ç—å 1000 —Ü—ñ–ª—å–æ–≤–∏—Ö —ñ–º–ø—Ä–µ—Å—ñ–π (–≥—Ä–Ω)", min_value=1.0, value=200.0)
comp_dig_imp_week = st.number_input("–¢–∏—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ —É Digital (—Ç–∏—Å. —ñ–º–ø—Ä–µ—Å—ñ–π/—Ç–∏–∂–¥–µ–Ω—å)", min_value=0, value=500)

# –§—É–Ω–∫—Ü—ñ—ó –æ—Ö–æ–ø–ª–µ–Ω–Ω—è
def reach_tv(trp):
    return 1 - np.exp(-0.015 * trp)

def reach_digital(imps_mln):
    return 1 - np.exp(-0.25 * imps_mln)

options = []
for share in np.linspace(0.1, 0.9, 9):  # 9 –æ–ø—Ü—ñ–π –≤—ñ–¥ 10% –¥–æ 90%
    tv_budget = budget * share
    dig_budget = budget * (1 - share)

    tv_trp = tv_budget / tv_cpt
    dig_imps = dig_budget / dig_cpm * 1000  # –±–æ CPM

    # –¢–∏–∂–Ω–µ–≤–∏–π —Ç–∏—Å–∫
    tv_weekly_trp = tv_trp / weeks
    dig_weekly_imp = dig_imps / weeks / 1000  # –≤ —Ç–∏—Å.

    # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –≤–∏–º–æ–≥–∏
    if tv_weekly_trp < comp_tv_trp_week or dig_weekly_imp < comp_dig_imp_week:
        continue

    # –û—Ö–æ–ø–ª–µ–Ω–Ω—è
    r_tv = reach_tv(tv_trp)
    r_dig = reach_digital(dig_imps / 1e6)  # –≤ –º–ª–Ω

    r_cross = 1 - (1 - r_tv) * (1 - r_dig)

    # SPP
    som_tv = share
    som_dig = 1 - share
    sov_tv = tv_weekly_trp / (tv_weekly_trp + comp_tv_trp_week) if (tv_weekly_trp + comp_tv_trp_week) > 0 else 0
    sov_dig = dig_weekly_imp / (dig_weekly_imp + comp_dig_imp_week) if (dig_weekly_imp + comp_dig_imp_week) > 0 else 0

    spp_tv = sov_tv / som_tv if som_tv > 0 else 0
    spp_dig = sov_dig / som_dig if som_dig > 0 else 0

    # –°—Ç–∞—Ç—É—Å
    status = "‚úÖ –û–ö"
    if tv_weekly_trp < comp_tv_trp_week and dig_weekly_imp < comp_dig_imp_week:
        status = "‚ùå –ù–∏–∂—á–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ —É –¢–ë —Ç–∞ Digital"
    elif tv_weekly_trp < comp_tv_trp_week:
        status = "‚ùå –ù–∏–∂—á–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ —É –¢–ë"
    elif dig_weekly_imp < comp_dig_imp_week:
        status = "‚ùå –ù–∏–∂—á–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ —É Digital"

    options.append({
        "–¢–ë %": round(share*100),
        "Digital %": round((1-share)*100),
        "TRP total": round(tv_trp, 1),
        "TRP/week": round(tv_weekly_trp, 1),
        "Imp (–º–ª–Ω)": round(dig_imps/1e6, 2),
        "Imp/week (—Ç–∏—Å.)": round(dig_weekly_imp, 1),
        "Reach TV": round(r_tv*100, 1),
        "Reach Dig": round(r_dig*100, 1),
        "Cross Reach": round(r_cross*100, 1),
        "SPP TV": round(spp_tv, 2),
        "SPP Dig": round(spp_dig, 2),
        "Status": status
    })

# --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±—é–¥–∂–µ—Ç—É ---
min_budget_tv = comp_tv_trp_week * weeks * tv_cpt  # –º—ñ–Ω. –±—é–¥–∂–µ—Ç –Ω–∞ –¢–ë
min_budget_dig = comp_dig_imp_week * weeks * dig_cpm  # –º—ñ–Ω. –±—é–¥–∂–µ—Ç –Ω–∞ Digital (—Ç–∏—Å. CPM ‚Üí –º–Ω–æ–∂–∏–º–æ)
min_total_budget = min_budget_tv + min_budget_dig

if not options:
    st.error(f"–í–∞—à –±—é–¥–∂–µ—Ç = {budget:,.0f} –≥—Ä–Ω\n"
             f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç = {min_total_budget:,.0f} –≥—Ä–Ω\n"
             f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ: —Ç—Ä–µ–±–∞ +{(min_total_budget - budget):,.0f} –≥—Ä–Ω\n\n"
             f"üëâ –°–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ñ–ª–∞–π—Ç—É (–∑–∞—Ä–∞–∑ {weeks} —Ç–∏–∂–Ω—ñ–≤).")
else:
    df = pd.DataFrame(options)
    st.dataframe(df)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ Excel
    excel_file = "split_results.xlsx"
    df.to_excel(excel_file, index=False)

    with open(excel_file, "rb") as f:
        st.download_button("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel", f, file_name=excel_file)

    # --- –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è ---
    st.subheader("–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è Cross Reach")
    fig, ax = plt.subplots()

    for i, row in df.iterrows():
        color = "green" if "‚úÖ" in row["Status"] else "red"
        ax.scatter(row["–¢–ë %"], row["Cross Reach"], color=color, s=100)
        ax.text(row["–¢–ë %"], row["Cross Reach"]+0.5, row["Status"], fontsize=8, ha="center")

    ax.set_xlabel("–ß–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É –Ω–∞ –¢–ë (%)")
    ax.set_ylabel("Cross Reach (%)")
    ax.set_title("–ö—Ä–æ—Å–º–µ–¥—ñ–π–Ω–µ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è –∑–∞ —Ä—ñ–∑–Ω–∏—Ö —Å–ø–ª—ñ—Ç—ñ–≤")
    st.pyplot(fig)
