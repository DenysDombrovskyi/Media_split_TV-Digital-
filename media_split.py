import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize

# --- –í—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ---
st.title("üìä –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Å–ø–ª—ñ—Ç –¢–ë + Digital")

budget = st.number_input("–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç", min_value=1000, step=1000, value=50000)
flight_weeks = st.number_input("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ñ–ª–∞–π—Ç—É (—Ç–∏–∂–Ω—ñ)", min_value=1, value=4)

# --- TV –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ---
tv_cost_per_reach = st.number_input("–í–∞—Ä—Ç—ñ—Å—Ç—å 1 –æ—Ö–æ–ø–ª–µ–Ω–Ω—è –≤ –¢–ë", value=5.0)
tv_weekly_clutter = st.number_input("–ö–ª–∞—Ç—Ç–µ—Ä –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ (–¢–†–ü/—Ç–∏–∂–¥–µ–Ω—å –≤ –¢–ë)", value=100.0)

# --- Digital –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ---
digital_cost_per_reach = st.number_input("–í–∞—Ä—Ç—ñ—Å—Ç—å 1 –æ—Ö–æ–ø–ª–µ–Ω–Ω—è –≤ Digital", value=2.0)
digital_weekly_clutter = st.number_input("–ö–ª–∞—Ç—Ç–µ—Ä –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ (—ñ–º–ø—Ä–µ—Å—ñ—ó/—Ç–∏–∂–¥–µ–Ω—å)", value=50000.0)

# --- –°–∫—ñ–ª—å–∫–∏ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ ---
n_options = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Å–ø–ª—ñ—Ç—ñ–≤", 5, 15, 10)

# --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ ---
results = []
for split in np.linspace(0.1, 0.9, n_options):  # –≤—ñ–¥ 10% –¥–æ 90%
    tv_budget = budget * split
    digital_budget = budget * (1 - split)

    # –û—Ö–æ–ø–ª–µ–Ω–Ω—è
    tv_reach = tv_budget / tv_cost_per_reach
    digital_reach = digital_budget / digital_cost_per_reach

    # –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∫—Ä–æ—Å-–º–µ–¥—ñ–π–Ω–æ–≥–æ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è
    cross_reach = 1 - (1 - tv_reach/1e6) * (1 - digital_reach/1e6)  # –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è

    # –¢–∏—Å–∫ (TV = TRP, Digital = —ñ–º–ø—Ä–µ—Å—ñ—ó)
    tv_pressure = tv_reach / flight_weeks
    digital_pressure = digital_reach / flight_weeks

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤
    tv_ok = tv_pressure >= tv_weekly_clutter
    digital_ok = digital_pressure >= digital_weekly_clutter
    overall_ok = tv_ok and digital_ok

    results.append({
        "–°–ø–ª—ñ—Ç –¢–ë": f"{split*100:.0f}%",
        "–ë—é–¥–∂–µ—Ç –¢–ë": int(tv_budget),
        "–ë—é–¥–∂–µ—Ç Digital": int(digital_budget),
        "–û—Ö–æ–ø–ª–µ–Ω–Ω—è –¢–ë": int(tv_reach),
        "–û—Ö–æ–ø–ª–µ–Ω–Ω—è Digital": int(digital_reach),
        "–ö—Ä–æ—Å-–æ—Ö–æ–ø–ª–µ–Ω–Ω—è": f"{cross_reach*100:.1f}%",
        "–¢–∏—Å–∫ –¢–ë/—Ç–∏–∂–¥": int(tv_pressure),
        "–¢–∏—Å–∫ Digital/—Ç–∏–∂–¥": int(digital_pressure),
        "–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π": overall_ok
    })

df = pd.DataFrame(results)

# --- –ü—ñ–¥—Å–≤—ñ—Ç–∫–∞ –∫–æ–ª—å–æ—Ä–∞–º–∏ ---
def highlight(row):
    color = "background-color: lightgreen" if row["–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π"] else "background-color: lightcoral"
    return [color] * len(row)

st.subheader("üìë –†–µ–∑—É–ª—å—Ç–∞—Ç–∏")
st.dataframe(df.style.apply(highlight, axis=1))

# --- –ì—Ä–∞—Ñ—ñ–∫ ---
st.subheader("üìà –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–ø–ª—ñ—Ç—ñ–≤")
fig, ax = plt.subplots()
ax.plot(df["–°–ø–ª—ñ—Ç –¢–ë"], [float(x[:-1]) for x in df["–ö—Ä–æ—Å-–æ—Ö–æ–ø–ª–µ–Ω–Ω—è"]], marker="o")
ax.set_ylabel("–ö—Ä–æ—Å-–æ—Ö–æ–ø–ª–µ–Ω–Ω—è %")
ax.set_xlabel("–°–ø–ª—ñ—Ç –¢–ë")
ax.set_title("–ö—Ä–æ—Å-–º–µ–¥—ñ–π–Ω–µ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–ø–ª—ñ—Ç–∞")
plt.xticks(rotation=45)
st.pyplot(fig)

# --- –ï–∫—Å–ø–æ—Ä—Ç ---
st.download_button(
    "‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ Excel",
    data=df.to_excel("results.xlsx", index=False, engine="openpyxl"),
    file_name="media_split.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

