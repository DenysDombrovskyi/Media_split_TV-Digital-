import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from itertools import product

# -------------------------------
# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# -------------------------------

def cross_media_reach(reach_tv, reach_digital):
    """–ö—Ä–æ—Å–º–µ–¥—ñ–π–Ω–µ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è —è–∫ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –¥–≤–æ—Ö –Ω–µ–∑–∞–ª–µ–∂–Ω–∏—Ö –ø–æ–¥—ñ–π"""
    return reach_tv + reach_digital - (reach_tv * reach_digital)

def calculate_option(budget, cost_tv, cost_digital, 
                     clutter_tv, clutter_digital,
                     competitor_tv, competitor_digital,
                     weeks, share_tv):
    """
    –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ–¥–Ω–æ–≥–æ —Å–ø–ª—ñ—Ç–∞ –¢–í/–î—ñ–¥–∂–∏—Ç–∞–ª
    """
    spend_tv = budget * share_tv
    spend_digital = budget * (1 - share_tv)

    # –Ø–∫—â–æ –Ω–µ–º–∞—î –≥—Ä–æ—à–µ–π
    if spend_tv < cost_tv or spend_digital < cost_digital:
        return None

    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–∏—Å–∫—É
    trp_tv = spend_tv / cost_tv
    trp_digital = spend_digital / cost_digital

    # –ö–ª–∞—Ç—Ç–µ—Ä
    eff_trp_tv = max(0, trp_tv - clutter_tv)
    eff_trp_digital = max(0, trp_digital - clutter_digital)

    # –û—Ö–æ–ø–ª–µ–Ω–Ω—è (—É–º–æ–≤–Ω–æ: saturating function)
    reach_tv = 1 - np.exp(-eff_trp_tv / (weeks * 100))
    reach_digital = 1 - np.exp(-eff_trp_digital / (weeks * 100))

    # –ö—Ä–æ—Å–º–µ–¥—ñ–π–Ω–µ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è
    cross_reach = cross_media_reach(reach_tv, reach_digital)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤
    tv_vs_comp = "OK" if eff_trp_tv >= competitor_tv else "–ù–∏–∂—á–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤"
    dig_vs_comp = "OK" if eff_trp_digital >= competitor_digital else "–ù–∏–∂—á–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤"

    return {
        "Share TV": round(share_tv * 100, 1),
        "Spend TV": round(spend_tv, 0),
        "Spend Digital": round(spend_digital, 0),
        "TRP TV": round(eff_trp_tv, 1),
        "TRP Digital": round(eff_trp_digital, 1),
        "Reach TV": round(reach_tv * 100, 1),
        "Reach Digital": round(reach_digital * 100, 1),
        "Cross Reach": round(cross_reach * 100, 1),
        "TV vs Competitors": tv_vs_comp,
        "Digital vs Competitors": dig_vs_comp
    }

# -------------------------------
# Streamlit UI
# -------------------------------

st.title("üìä –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Å–ø–ª—ñ—Ç –¢–í / –î—ñ–¥–∂–∏—Ç–∞–ª")

budget = st.number_input("–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç, $", min_value=1000, value=100000, step=1000)
cost_tv = st.number_input("–í–∞—Ä—Ç—ñ—Å—Ç—å 1 TRP –Ω–∞ –¢–ë, $", min_value=1, value=500)
cost_digital = st.number_input("–í–∞—Ä—Ç—ñ—Å—Ç—å 1000 —Ü—ñ–ª—å–æ–≤–∏—Ö —ñ–º–ø—Ä–µ—Å—ñ–π, $", min_value=1, value=5)

clutter_tv = st.number_input("–ö–ª–∞—Ç—Ç–µ—Ä (–¢–†–ü –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å)", min_value=0, value=50)
clutter_digital = st.number_input("–ö–ª–∞—Ç—Ç–µ—Ä (—Ç–∏—Å. —ñ–º–ø—Ä–µ—Å—ñ–π –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å)", min_value=0, value=100)

competitor_tv = st.number_input("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∏–π —Ç–∏—Å–∫ –Ω–∞ –¢–ë (–¢–†–ü –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å)", min_value=0, value=150)
competitor_digital = st.number_input("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∏–π —Ç–∏—Å–∫ —É Digital (—Ç–∏—Å. —ñ–º–ø—Ä–µ—Å—ñ–π –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å)", min_value=0, value=300)

weeks = st.number_input("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ñ–ª–∞–π—Ç—É (—Ç–∏–∂–Ω—ñ)", min_value=1, value=4)
num_options = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤", min_value=5, max_value=10, value=5)

# -------------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
# -------------------------------
results = []
splits = np.linspace(0.1, 0.9, num_options)  # —á–∞—Å—Ç–∫–∏ –¢–í

for share_tv in splits:
    option = calculate_option(
        budget, cost_tv, cost_digital,
        clutter_tv, clutter_digital,
        competitor_tv, competitor_digital,
        weeks, share_tv
    )
    if option:
        results.append(option)

if results:
    df = pd.DataFrame(results)
    st.dataframe(df)

    # –ì—Ä–∞—Ñ—ñ–∫
    fig, ax = plt.subplots(figsize=(7, 5))
    ax.plot(df["Share TV"], df["Cross Reach"], marker="o")
    ax.set_xlabel("–ß–∞—Å—Ç–∫–∞ –¢–í, %")
    ax.set_ylabel("–ö—Ä–æ—Å–º–µ–¥—ñ–π–Ω–µ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è, %")
    ax.set_title("–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –æ—Ö–æ–ø–ª–µ–Ω–Ω—è –≤—ñ–¥ —Å–ø–ª—ñ—Ç—É")
    st.pyplot(fig)

    # –ï–∫—Å–ø–æ—Ä—Ç
    if st.button("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel"):
        file_path = "media_split_results.xlsx"
        df.to_excel(file_path, index=False)
        with open(file_path, "rb") as f:
            st.download_button("–°–∫–∞—á–∞—Ç–∏ —Ñ–∞–π–ª", f, file_name=file_path)
else:
    st.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±—é–¥–∂–µ—Ç—É –¥–ª—è –∑–∞–ø—É—Å–∫—É –∫–∞–º–ø–∞–Ω—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–±—ñ–ª—å—à–∏—Ç–∏ –±—é–¥–∂–µ—Ç –∞–±–æ —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ñ–ª–∞–π—Ç—É.")

