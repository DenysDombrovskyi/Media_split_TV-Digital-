import streamlit as st
import pandas as pd
import numpy as np
from scipy.interpolate import CubicSpline
import plotly.express as px
import io

st.set_page_config(page_title="Media Split Optimizer", layout="wide")
st.title("üìä –°—É—á–∞—Å–Ω–∏–π –º–µ–¥—ñ–∞-—Å–ø–ª—ñ—Ç –¢–ë + Digital")

# --- Sidebar ---
st.sidebar.header("–û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
budget = st.sidebar.slider("–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç", 100_000, 50_000_000, 5_000_000, step=100_000)
flight_weeks = st.sidebar.slider("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ñ–ª–∞–π—Ç—É (—Ç–∏–∂–Ω—ñ)", 1, 30, 4, step=1)
audience_size = st.sidebar.number_input("–†–æ–∑–º—ñ—Ä –∞—É–¥–∏—Ç–æ—Ä—ñ—ó Digital (—Ç–∏—Å.)", min_value=1.0, value=1000.0)
tv_cost_per_trp = st.sidebar.number_input("–í–∞—Ä—Ç—ñ—Å—Ç—å 1 TRP –¢–ë", value=500.0)
dig_cost_per_imp = st.sidebar.number_input("–í–∞—Ä—Ç—ñ—Å—Ç—å 1 —Ç–∏—Å. —ñ–º–ø—Ä–µ—Å—ñ–π Digital", value=5.0)
tv_weekly_clutter = st.sidebar.number_input("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∏–π —Ç–∏—Å–∫ –¢–ë (–¢–†–ü/—Ç–∏–∂–¥–µ–Ω—å)", value=150.0)
dig_weekly_clutter = st.sidebar.number_input("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∏–π —Ç–∏—Å–∫ Digital (TRP/—Ç–∏–∂–¥–µ–Ω—å)", value=300.0)
n_options = st.sidebar.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Å–ø–ª—ñ—Ç—ñ–≤", 5, 15, 10)

# --- Expander TRP ‚Üí Reach –¥–ª—è –¢–ë ---
with st.expander("–í–≤–µ–¥—ñ—Ç—å 5 —Ç–æ—á–æ–∫ TRP ‚Üí Reach % –¥–ª—è –¢–ë"):
    tv_trp_points, tv_reach_points = [], []
    for i in range(5):
        col1, col2 = st.columns(2)
        trp = col1.slider(f"TRP –¢–ë, —Ç–æ—á–∫–∞ {i+1}", 0.0, 500.0, float(i*50+50))
        reach = col2.slider(f"Reach_TV %, —Ç–æ—á–∫–∞ {i+1}", 0.0, 100.0, float(i*10+20))
        tv_trp_points.append(trp)
        tv_reach_points.append(reach/100)

# --- Expander TRP ‚Üí Reach –¥–ª—è Digital ---
with st.expander("–í–≤–µ–¥—ñ—Ç—å 5 —Ç–æ—á–æ–∫ TRP ‚Üí Reach % –¥–ª—è Digital"):
    dig_trp_points, dig_reach_points = [], []
    for i in range(5):
        col1, col2 = st.columns(2)
        trp = col1.slider(f"TRP Digital, —Ç–æ—á–∫–∞ {i+1}", 0.0, 500.0, float(i*10+10))
        reach = col2.slider(f"Reach_Digital %, —Ç–æ—á–∫–∞ {i+1}", 0.0, 100.0, float(i*5+10))
        dig_trp_points.append(trp)
        dig_reach_points.append(reach/100)

# --- –Ü–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—è ---
tv_spline = CubicSpline(tv_trp_points, tv_reach_points)
dig_spline = CubicSpline(dig_trp_points, dig_reach_points)

# --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ ---
results = []
budget_warning = False
min_needed_budget = 0

for split in np.linspace(0.1, 0.9, n_options):
    tv_budget = budget * split
    dig_budget = budget * (1 - split)
    
    # TRP –¢–ë
    tv_trp = tv_budget / tv_cost_per_trp
    
    # Digital TRP
    dig_imp = dig_budget / dig_cost_per_imp       # —Ç–∏—Å. —ñ–º–ø—Ä–µ—Å—ñ–π
    dig_trp = dig_imp / audience_size * 100       # TRP %
    
    # Reach
    tv_reach = float(np.clip(tv_spline(tv_trp), 0, 0.82))
    dig_reach = float(np.clip(dig_spline(dig_trp), 0, 0.99))
    cross_reach = tv_reach + dig_reach - tv_reach*dig_reach
    
    # –¢–∏–∂–Ω–µ–≤–∏–π —Ç–∏—Å–∫
    tv_weekly = tv_trp / flight_weeks
    dig_weekly = dig_trp / flight_weeks
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–Ω–æ—ó –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    overall_ok = (tv_weekly >= tv_weekly_clutter) & (dig_weekly >= dig_weekly_clutter)
    if not overall_ok:
        budget_warning = True
        min_tv_budget = tv_weekly_clutter * flight_weeks * tv_cost_per_trp
        min_dig_budget = dig_weekly_clutter * flight_weeks * dig_cost_per_imp * audience_size / 100
        min_needed_budget = max(min_needed_budget, min_tv_budget + min_dig_budget)
    
    # CPR / CPT
    cpr = (tv_budget + dig_budget) / (cross_reach*100)
    cpt_dig = dig_budget / dig_trp
    
    results.append({
        "–°–ø–ª—ñ—Ç –¢–ë": f"{split*100:.0f}%",
        "–ë—é–¥–∂–µ—Ç –¢–ë": int(tv_budget),
        "–ë—é–¥–∂–µ—Ç Digital": int(dig_budget),
        "TRP_TV": round(tv_trp,1),
        "TRP_Digital": round(dig_trp,1),
        "Imp_Digital": round(dig_imp,1),
        "Reach_TV %": round(tv_reach*100,1),
        "Reach_Digital %": round(dig_reach*100,1),
        "Cross_Reach %": round(cross_reach*100,1),
        "–¢–∏—Å–∫ –¢–ë/—Ç–∏–∂–¥": round(tv_weekly,1),
        "–¢–∏—Å–∫ Digital/—Ç–∏–∂–¥": round(dig_weekly,1),
        "CPR": round(cpr,2),
        "CPT_Digital": round(cpt_dig,2),
        "–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π": overall_ok
    })

df = pd.DataFrame(results)

# --- –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ–º—É –±—é–¥–∂–µ—Ç—ñ ---
if budget_warning:
    st.warning(f"‚ö†Ô∏è –î–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ —Ç–∏—Å–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ {int(min_needed_budget):,} –≥—Ä–Ω. –ú–æ–∂–Ω–∞ –∑–±—ñ–ª—å—à–∏—Ç–∏ –±—é–¥–∂–µ—Ç –∞–±–æ —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ñ–ª–∞–π—Ç—É.")

# --- –ù–∞–π–∫—Ä–∞—â–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç ---
best_idx = df[df["–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π"]]["CPR"].idxmin() if df[df["–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π"]].shape[0]>0 else df["CPR"].idxmin()
best_option = df.loc[best_idx]

# --- –ö–∞—Ä—Ç–∫–∏ ---
st.subheader("üèÜ –ù–∞–π–∫—Ä–∞—â–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —Å–ø–ª—ñ—Ç—É")
col1, col2, col3 = st.columns(3)
col1.metric("–ù–∞–π–Ω–∏–∂—á–∏–π CPR", f"{best_option['CPR']:.2f}")
col2.metric("Cross Reach %", f"{best_option['Cross_Reach %']:.1f}%")
col3.metric("TRP Digital", f"{best_option['TRP_Digital']:.1f}")

# --- HTML —Ç–∞–±–ª–∏—Ü—è –∑ –ø—ñ–¥—Å–≤—ñ—Ç–∫–æ—é ---
def render_colored_table(df, best_idx):
    def color_row(row):
        if row.name == best_idx:
            return 'background-color: deepskyblue; color: white'
        elif row["–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π"]:
            return 'background-color: lightgreen'
        else:
            return 'background-color: lightcoral'

    html = "<table style='border-collapse: collapse; width: 100%;'>"
    html += "<tr>" + "".join([f"<th style='border: 1px solid black; padding: 5px;'>{c}</th>" for c in df.columns]) + "</tr>"

    for idx, row in df.iterrows():
        color = color_row(row)
        html += "<tr>" + "".join([f"<td style='border: 1px solid black; padding: 5px; {color}'>{v}</td>" for v in row]) + "</tr>"

    html += "</table>"
    return html

st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—Å—ñ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤")
st.markdown(render_colored_table(df, best_idx), unsafe_allow_html=True)

# --- Plotly –≥—Ä–∞—Ñ—ñ–∫–∏ ---
st.subheader("üìä –†–æ–∑–ø–æ–¥—ñ–ª –±—é–¥–∂–µ—Ç—É –ø–æ —Å–ø–ª—ñ—Ç–∞—Ö")
fig_budget = px.bar(df, x="–°–ø–ª—ñ—Ç –¢–ë", y=["–ë—é–¥–∂–µ—Ç –¢–ë","–ë—é–¥–∂–µ—Ç Digital"], barmode="stack",
                    title="–†–æ–∑–ø–æ–¥—ñ–ª –±—é–¥–∂–µ—Ç—É (stacked)")
st.plotly_chart(fig_budget, use_container_width=True)

st.subheader("üìà –û—Ö–æ–ø–ª–µ–Ω–Ω—è –ø–æ –≤—Å—ñ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç–∞—Ö")
fig_reach = px.line(df, x="–°–ø–ª—ñ—Ç –¢–ë", y=["Reach_TV %","Reach_Digital %","Cross_Reach %"],
                    markers=True, title="Reach TV/Digital/Cross")
st.plotly_chart(fig_reach, use_container_width=True)

# --- Excel download ---
st.subheader("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel")
output = io.BytesIO()
with pd.ExcelWriter(output, engine="openpyxl") as writer:
    df.to_excel(writer, index=False, sheet_name="Splits")
output.seek(0)
st.download_button(
    label="–°–∫–∞—á–∞—Ç–∏ Excel",
    data=output,
    file_name="media_split_modern.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)


