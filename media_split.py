import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import io
from scipy.interpolate import CubicSpline
from openpyxl import load_workbook
from openpyxl.chart import BarChart, LineChart, Reference

st.title("üìä –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Å–ø–ª—ñ—Ç –¢–ë + Digital –∑ CPR —ñ –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏ Excel")

# --- –í–≤–µ–¥–µ–Ω–Ω—è —Ç–æ—á–æ–∫ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è ---
st.subheader("–í–≤–µ–¥—ñ—Ç—å 5 —Ç–æ—á–æ–∫ TRP ‚Üí Reach % –¥–ª—è –¢–ë")
tv_trp_points, tv_reach_points = [], []
for i in range(5):
    col1, col2 = st.columns(2)
    trp = col1.number_input(f"TRP –¢–ë, —Ç–æ—á–∫–∞ {i+1}", min_value=0.0, value=float(i*50+50))
    reach = col2.number_input(f"Reach_TV %, —Ç–æ—á–∫–∞ {i+1}", min_value=0.0, max_value=100.0, value=float(i*10+20))
    tv_trp_points.append(trp)
    tv_reach_points.append(reach/100)

st.subheader("–í–≤–µ–¥—ñ—Ç—å 5 —Ç–æ—á–æ–∫ Impressions ‚Üí Reach % –¥–ª—è Digital")
dig_imp_points, dig_reach_points = [], []
for i in range(5):
    col1, col2 = st.columns(2)
    imp = col1.number_input(f"Impressions Digital (—Ç–∏—Å.), —Ç–æ—á–∫–∞ {i+1}", min_value=0.0, value=float(i*100+100))
    reach = col2.number_input(f"Reach_Digital %, —Ç–æ—á–∫–∞ {i+1}", min_value=0.0, max_value=100.0, value=float(i*5+10))
    dig_imp_points.append(imp)
    dig_reach_points.append(reach/100)

# --- –Ü–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—è ---
tv_spline = CubicSpline(tv_trp_points, tv_reach_points)
dig_spline = CubicSpline(dig_imp_points, dig_reach_points)

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –±—é–¥–∂–µ—Ç—É —Ç–∞ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ ---
st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –±—é–¥–∂–µ—Ç—É —Ç–∞ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ")
budget = st.number_input("–ó–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç", min_value=1000, step=1000, value=50000)
flight_weeks = st.number_input("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ñ–ª–∞–π—Ç—É (—Ç–∏–∂–Ω—ñ)", min_value=1, value=4)
tv_cost_per_trp = st.number_input("–í–∞—Ä—Ç—ñ—Å—Ç—å 1 TRP –≤ –¢–ë", value=500.0)
dig_cost_per_imp = st.number_input("–í–∞—Ä—Ç—ñ—Å—Ç—å 1 —Ç–∏—Å. —ñ–º–ø—Ä–µ—Å—ñ–π –≤ Digital", value=5.0)
tv_weekly_clutter = st.number_input("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∏–π —Ç–∏—Å–∫ –¢–ë (–¢–†–ü/—Ç–∏–∂–¥–µ–Ω—å)", value=150.0)
dig_weekly_clutter = st.number_input("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∏–π —Ç–∏—Å–∫ Digital (—Ç–∏—Å. —ñ–º–ø—Ä–µ—Å—ñ–π/—Ç–∏–∂–¥–µ–Ω—å)", value=300.0)
n_options = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ —Å–ø–ª—ñ—Ç—ñ–≤", 5, 15, 10)

# --- –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç ---
min_budget_tv = tv_weekly_clutter * flight_weeks * tv_cost_per_trp
min_budget_dig = dig_weekly_clutter * flight_weeks * dig_cost_per_imp / 1000
min_total_budget = min_budget_tv + min_budget_dig
if budget < min_total_budget:
    st.warning(f"‚ùå –ü–æ—Ç–æ—á–Ω–∏–π –±—é–¥–∂–µ—Ç ({int(budget)}) –∑–∞–º–∞–ª–∏–π. –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç: {int(min_total_budget)}")

# --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ ---
results = []
for split in np.linspace(0.1, 0.9, n_options):
    tv_budget = budget * split
    dig_budget = budget * (1 - split)

    tv_trp = tv_budget / tv_cost_per_trp
    dig_imp = dig_budget / dig_cost_per_imp * 1000

    # --- –û–±–º–µ–∂–µ–Ω–Ω—è Reach –¢–ë –¥–æ 82%
    tv_reach = float(np.clip(tv_spline(tv_trp), 0, 0.82))
    dig_reach = float(np.clip(dig_spline(dig_imp), 0, 1))
    cross_reach = tv_reach + dig_reach - tv_reach * dig_reach

    tv_weekly = tv_trp / flight_weeks
    dig_weekly = dig_imp / flight_weeks / 1000

    tv_ok = tv_weekly >= tv_weekly_clutter
    dig_ok = dig_weekly >= dig_weekly_clutter
    overall_ok = tv_ok and dig_ok

    results.append({
        "–°–ø–ª—ñ—Ç –¢–ë": f"{split*100:.0f}%",
        "–ë—é–¥–∂–µ—Ç –¢–ë": int(tv_budget),
        "–ë—é–¥–∂–µ—Ç Digital": int(dig_budget),
        "TRP_TV": round(tv_trp,1),
        "Imp_Digital": int(dig_imp),
        "Reach_TV %": round(tv_reach*100,1),
        "Reach_Digital %": round(dig_reach*100,1),
        "Cross_Reach %": round(cross_reach*100,1),
        "–¢–∏—Å–∫ –¢–ë/—Ç–∏–∂–¥": round(tv_weekly,1),
        "–¢–∏—Å–∫ Digital/—Ç–∏–∂–¥": round(dig_weekly,1),
        "–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π": overall_ok
    })

df = pd.DataFrame(results)

# --- –î–æ–¥–∞–≤–∞–Ω–Ω—è CPR ---
df["CPR"] = (df["–ë—é–¥–∂–µ—Ç –¢–ë"] + df["–ë—é–¥–∂–µ—Ç Digital"]) / df["Cross_Reach %"]
df["–¢–∏—Å–∫_–æ–∫"] = (df["–¢–∏—Å–∫ –¢–ë/—Ç–∏–∂–¥"] >= tv_weekly_clutter) & (df["–¢–∏—Å–∫ Digital/—Ç–∏–∂–¥"] >= dig_weekly_clutter)

if df[df["–¢–∏—Å–∫_–æ–∫"]].shape[0] > 0:
    min_cpr_idx = df[df["–¢–∏—Å–∫_–æ–∫"]]["CPR"].idxmin()
else:
    min_cpr_idx = None

# --- –ü—ñ–¥—Å–≤—ñ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ñ ---
def highlight(row):
    if row.name == min_cpr_idx:
        return ["background-color: deepskyblue"]*len(row)
    color = "background-color: lightgreen" if row["–ï—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π"] else "background-color: lightcoral"
    return [color]*len(row)

st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–ø–ª—ñ—Ç—ñ–≤")
st.dataframe(df.style.apply(highlight, axis=1))

# --- Stacked –≥—Ä–∞—Ñ—ñ–∫ –±—é–¥–∂–µ—Ç—É ---
st.subheader("üìä –†–æ–∑–ø–æ–¥—ñ–ª –±—é–¥–∂–µ—Ç—É –ø–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∞—Ö —Å–ø–ª—ñ—Ç—É (stacked)")
fig, ax = plt.subplots(figsize=(10,5))
x = np.arange(len(df))
ax.bar(x, df["–ë—é–¥–∂–µ—Ç –¢–ë"], label="–¢–ë")
ax.bar(x, df["–ë—é–¥–∂–µ—Ç Digital"], bottom=df["–ë—é–¥–∂–µ—Ç –¢–ë"], label="Digital")
ax.set_xticks(x)
ax.set_xticklabels(df["–°–ø–ª—ñ—Ç –¢–ë"])
ax.set_ylabel("–ë—é–¥–∂–µ—Ç")
ax.set_title("–†–æ–∑–ø–æ–¥—ñ–ª –±—é–¥–∂–µ—Ç—É –ø–æ —Å–ø–ª—ñ—Ç–∞—Ö (stacked)")
ax.legend()
plt.xticks(rotation=45)
st.pyplot(fig)

# --- –õ—ñ–Ω—ñ–π–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è (–∫—Ä–æ—Å–º–µ–¥—ñ–π–Ω–µ + –º–µ–¥—ñ–∞) ---
st.subheader("üìà –û—Ö–æ–ø–ª–µ–Ω–Ω—è –ø–æ –≤—Å—ñ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç–∞—Ö —Å–ø–ª—ñ—Ç—É")
fig2, ax2 = plt.subplots(figsize=(10,5))
ax2.plot(df["–°–ø–ª—ñ—Ç –¢–ë"], df["Reach_TV %"], marker='o', label="Reach_TV %")
ax2.plot(df["–°–ø–ª—ñ—Ç –¢–ë"], df["Reach_Digital %"], marker='o', label="Reach_Digital %")
ax2.plot(df["–°–ø–ª—ñ—Ç –¢–ë"], df["Cross_Reach %"], marker='o', label="Cross_Reach %")
ax2.set_ylabel("–û—Ö–æ–ø–ª–µ–Ω–Ω—è %")
ax2.set_title("–ö—Ä–æ—Å–º–µ–¥—ñ–π–Ω–µ —Ç–∞ –º–µ–¥—ñ–∞ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è")
ax2.legend()
plt.xticks(rotation=45)
st.pyplot(fig2)

# --- –ï–∫—Å–ø–æ—Ä—Ç Excel –∑ –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏ ---
st.subheader("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel –∑ –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏")
output = io.BytesIO()
with pd.ExcelWriter(output, engine="openpyxl") as writer:
    df.to_excel(writer, index=False, sheet_name="Splits")

output.seek(0)
wb = load_workbook(output)
ws = wb["Splits"]

# --- Stacked bar chart –±—é–¥–∂–µ—Ç—É ---
budget_chart = BarChart()
budget_chart.type = "col"
budget_chart.title = "–†–æ–∑–ø–æ–¥—ñ–ª –±—é–¥–∂–µ—Ç—É –¢–ë/Digital"
budget_chart.y_axis.title = "–ë—é–¥–∂–µ—Ç"
budget_chart.x_axis.title = "–°–ø–ª—ñ—Ç –¢–ë"
budget_chart.overlap = 100
budget_chart.grouping = "stacked"

data = Reference(ws, min_col=2, max_col=3, min_row=1, max_row=ws.max_row)
cats = Reference(ws, min_col=1, min_row=2, max_row=ws.max_row)
budget_chart.add_data(data, titles_from_data=True)
budget_chart.set_categories(cats)
ws.add_chart(budget_chart, "L2")

# --- –õ—ñ–Ω—ñ–π–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è (Reach_TV %, Reach_Digital %, Cross_Reach %) ---
reach_chart = LineChart()
reach_chart.title = "–û—Ö–æ–ø–ª–µ–Ω–Ω—è –ø–æ —Å–ø–ª—ñ—Ç–∞—Ö"
reach_chart.y_axis.title = "Reach %"
reach_chart.x_axis.title = "–°–ø–ª—ñ—Ç –¢–ë"

data = Reference(ws, min_col=7, max_col=9, min_row=1, max_row=ws.max_row)  # —Ç—ñ–ª—å–∫–∏ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è
cats = Reference(ws, min_col=1, min_row=2, max_row=ws.max_row)
reach_chart.add_data(data, titles_from_data=True)
reach_chart.set_categories(cats)
ws.add_chart(reach_chart, "L20")

output_chart = io.BytesIO()
wb.save(output_chart)
output_chart.seek(0)

st.download_button(
    label="–°–∫–∞—á–∞—Ç–∏ Excel –∑ –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏",
    data=output_chart,
    file_name="media_split_chart.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

